When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?

The number of crackers in the box


Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:
O(1)
O(log n)
O(n)
O(n log n)
O(n^2)
O(2^n)


In the following cases, would a stack or queue be a more appropriate data structure?
    The process of loading and unloading pallets onto a flatbed truck
        A stack because you would the first crates you loaded would go into the back of the truck and therefore be the last to come out
    Putting bottle caps on bottles of beer as they roll down an assembly line
        A queue because the first filled would be the first in line to be capped
    Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2)
        A stack because you would have to pay attention to the things in parentases first

Describe two more situations where a queue would be an appropriate data structure.
    The order crops were planted and picked given they all would grow at exactly the same rate
    Reading a sentence to yourself and then saying it out loud (the words in the sentence)

Describe two more situations where a stack would be an appropriate data structure.
    Putting on rings and taking them off
    Playing towers of Hanoi


Given the linked list below, which are the nodes? What is the data for each node? Where is the head? Where is the tail? (Please be as specific as possible — exactly which parts of the diagram correspond to each part? Arrows? Boxes? Text?)

The nodes: are the boxes with their paired arrows (the data and the next)
The data: is the fruit in each box (eg 'Apple')
The head: is the node that starts the list, so here the 'Apple' node
The tail: is the node that ends the list, so here the 'Cherry' node

What’s the difference between doubly- and singly-linked lists?
    A singly linked list has arrows that only point in one direction while a doubly linked list, each node has a next and a previous arrow

Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    Because appending adds data to the end of a list and in a linked list, if you dont keep track of the tail you have to traverse all the way through the list to get to the tail starting at the only piece of data you would be keeping, the head

Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    food, italian, indian, mexian, lasagna, pizza, tikka masala, saag, burritos

Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.
    food, italian, lasagne, pizza, thin crust, chicago-style

How is a binary search tree different from other trees?
    in a binary search tree each node may only have 0, 1 or 2 children
    there must be some sort of ordering to how the tree is made, ie given some data to search for and looking at a node you would need to know in which direction to head to find (or not find) it, this is often done by larger/smaller 
    and tho not necissary it is important to have a balanced binary search tree, this is because if it is unbalanced, it would lack the ability to have a O(log n) search time






